#=============================================================================
# R script to plot Kraken2-assigned Pinaceae read counts with 
# UNIFORM AND VARIABLE Y-AXIS PLOT SEPARATELY (SCRIPT 1) and COMBINED (SCRIPT 2)

#SCRIPT 1: UNIFORM AND VARIABLE Y-AXIS PLOT SEPARATELY

# Load necessary libraries
library(tidyverse)
library(viridis)
library(cowplot)
library(stringr)

# Set the base directory
base_dir <- "path-to-data-folder"

# prepare "new_names.txt" file if you need it
#folder_name	new_name
#sulsseewli	Lake Sulsseewli (CH)
#glienicker	Lake Groß Glienicker (D)
#CER	Černé jezero (CZ)
#JOM	Otto Mörtsch Cave (CZ)
#montenegro	Zminje jezero (ME)
#SF	Lake Nautajärvi (FI)
#SWS	Atteköp wetland (SE)
#SES-HA	Hässeldala Port wetland (SE)
#SR	Lake Ezzhinitsa (RU)
#imandra	Lake Imandra (RU)
#lama	Lake Lama (RU)
#naleng	Lake Naleng (CN)
#ximen	Lake Ximen (CN)
#khamra	Lake Khamra (RU)
#btoko	Lake Bolshoe Toko (RU)
#batagay	Batagay megaslump (RU)
#emanda	Lake Emanda (RU)
#ulu	Lake Ulu (RU)
#hidden	Hidden Lake (US)

# Read the mapping of folder names to new names
mapping_file_path <- file.path(base_dir, "results/6_7_read_counts", "new_names.txt")

# Try reading the mapping file with different separators and encoding
mapping_file <- read.table(
  mapping_file_path,
  header = TRUE,
  sep = "\t",
  stringsAsFactors = FALSE,
  fileEncoding = "UTF-8",
  fill = TRUE,
  strip.white = TRUE
)

# Check if the mapping_file has the correct number of columns
if (ncol(mapping_file) < 2) {
  # Try reading with space as separator
  mapping_file <- read.table(
    mapping_file_path,
    header = TRUE,
    sep = "",
    stringsAsFactors = FALSE,
    fileEncoding = "UTF-8",
    fill = TRUE,
    strip.white = TRUE
  )
}

# Print the mapping file to verify columns and content
print("Mapping file contents:")
print(mapping_file)

# Ensure that the column names are correct
colnames(mapping_file) <- c("folder_name", "new_name")

# Remove any rows with NA in folder_name or new_name
mapping_file <- mapping_file[!is.na(mapping_file$folder_name) & !is.na(mapping_file$new_name), ]

# Create a named vector or a lookup table
site_name_mapping <- setNames(mapping_file$new_name, mapping_file$folder_name)

# List of site names extracted from the mapping file
sites <- as.character(mapping_file$folder_name)

# Verify the site names
print("Site names (folder names):")
print(sites)

# Define the function to process each site
process_site <- function(site_name, site_name_mapping) {
  # Ensure site_name is a character string
  site_name <- as.character(site_name)
  
  # Get the new name for the site
  new_site_name <- site_name_mapping[site_name]
  
  # Handle cases where the site_name might not be in the mapping
  if (is.na(new_site_name)) {
    warning(paste("No mapping found for site:", site_name, "- using original name"))
    new_site_name <- site_name
  }
  
  # Print the site being processed
  print(paste("Processing site:", site_name, "with new name:", new_site_name))
  
  # Define the paths to the data files
  pinaceae_file <- file.path(base_dir, "results/6_7_read_counts", site_name, "reads_count_pinaceae.csv")
  species_file <- file.path(base_dir, "results/6_7_read_counts", site_name, "reads_count_species.csv")
  meta_file <- file.path(base_dir, "scripts/Pipeline/rename_samples", site_name, paste0(site_name, "_meta_file.txt"))
  
  # Check if files exist before proceeding
  if (!file.exists(pinaceae_file)) {
    warning(paste("Pinaceae file does not exist:", pinaceae_file))
    return(NULL)
  }
  if (!file.exists(species_file)) {
    warning(paste("Species file does not exist:", species_file))
    return(NULL)
  }
  if (!file.exists(meta_file)) {
    warning(paste("Meta file does not exist:", meta_file))
    return(NULL)
  }
  
  # Read the original CSV file
  original_data <- read_csv(pinaceae_file, show_col_types = FALSE)
  
  # Step 1: Rename the columns to "ID" and "reads"
  colnames(original_data) <- c("ID", "reads")
  
  # Group by the common part of the ID (until the underscore "_") and sum the "reads" numbers
  merged_data <- original_data %>%
    group_by(ID = sub("_(.+)", "", ID)) %>%
    summarise(Pinaceae = sum(reads)) %>%
    ungroup()
  
  # Read the additional text file (tab-delimited) without a header
  additional_data <- read.delim(
    meta_file,
    header = FALSE,
    stringsAsFactors = FALSE,
    fileEncoding = "UTF-8"
  )
  
  # Rename the columns in the additional data
  colnames(additional_data) <- c("file", "library", "age", "lake", "name")
  
  # Merge the data frames based on the "ID" column in the original data and the "library" column in the additional data
  merged_data <- merge(
    merged_data,
    additional_data,
    by.x = "ID",
    by.y = "library",
    all.x = TRUE
  )
  
  # Remove the "file" and "name" columns
  merged_data <- merged_data %>%
    select(-file, -name)
  
  # Read the third data from the CSV file
  third_data <- read.csv(species_file, stringsAsFactors = FALSE)
  
  # Extract the numeric range and sample ID from BAM.File
  third_data <- third_data %>%
    mutate(
      numeric_range = str_extract(BAM.File, "-\\d+-\\d+\\.bam$"),
      ID_full = str_extract(BAM.File, "^(.*?)_combined"),
      ID = sub("^(.*?)_(.*?)_combined$", "\\1", ID_full)
    )
  
  # Map the numeric ranges to species
  third_data$Species <- case_when(
    third_data$numeric_range == "-1-122588.bam" ~ "Larix",
    third_data$numeric_range == "-122589-239988.bam" ~ "Pinus",
    third_data$numeric_range == "-239989-361212.bam" ~ "Abies",
    third_data$numeric_range == "-361213-485324.bam" ~ "Picea",
    TRUE ~ NA_character_
  )
  
  # Remove entries with NA in Species
  third_data <- third_data %>%
    filter(!is.na(Species))
  
  # Pivot the data to wide format with separate columns for species
  wide_data <- third_data %>%
    select(ID, Species, Mapped.Reads) %>%
    group_by(ID, Species) %>%
    summarise(Mapped.Reads = sum(Mapped.Reads), .groups = 'drop') %>%
    pivot_wider(
      names_from = Species,
      values_from = Mapped.Reads,
      values_fill = 0
    )
  
  # Ensure IDs in wide_data match those in merged_data
  # Print IDs in merged_data and wide_data to verify they match
  # print("IDs in merged_data:")
  # print(merged_data$ID)
  
  # print("IDs in wide_data:")
  # print(wide_data$ID)
  
  # Merge the wide data with the merged data based on the "ID" column
  final_data <- left_join(merged_data, wide_data, by = "ID")
  
  # Add missing species columns with zeros
  species_list <- c("Larix", "Pinus", "Abies", "Picea")
  for (species in species_list) {
    if (!species %in% colnames(final_data)) {
      final_data[[species]] <- 0
    }
  }
  
  # Fill missing values with 0
  final_data[is.na(final_data)] <- 0
  
  # Add a new column "Pinaceae_sum" as the sum of species counts
  final_data <- final_data %>%
    mutate(Pinaceae_sum = Larix + Pinus + Abies + Picea)
  
  # Add new columns for relative abundances
  final_data <- final_data %>%
    mutate(
      Larix_rel = round(Larix / Pinaceae_sum, 2),
      Pinus_rel = round(Pinus / Pinaceae_sum, 2),
      Abies_rel = round(Abies / Pinaceae_sum, 2),
      Picea_rel = round(Picea / Pinaceae_sum, 2)
    )
  
  # Replace NaN with 0 in the relative abundance columns
  final_data <- final_data %>%
    mutate(
      Larix_rel = ifelse(is.na(Larix_rel), 0, Larix_rel),
      Pinus_rel = ifelse(is.na(Pinus_rel), 0, Pinus_rel),
      Abies_rel = ifelse(is.na(Abies_rel), 0, Abies_rel),
      Picea_rel = ifelse(is.na(Picea_rel), 0, Picea_rel)
    )
  
  # Write the final merged data to a CSV file
  write.csv(
    final_data,
    file.path(base_dir, "results/6_7_read_counts", site_name, paste0(site_name, "_final_merged_data.csv")),
    row.names = FALSE
  )
  
  # Plotting code
  # Set Viridis color palette
  custom_colors <- viridis(5)
  
  # Decide x-axis variable
  if (site_name == "ximen") {
    x_axis_variable <- "ID"
  } else {
    x_axis_variable <- "age"
  }
  
  # Filter the data to select only the relevant variables
  final_data_filtered <- final_data %>%
    select(all_of(x_axis_variable), Pinaceae, Larix, Pinus, Abies, Picea)
  
  # Handle non-numeric ages and convert others to numeric
  if (x_axis_variable == "age") {
    final_data_filtered <- final_data_filtered %>%
      mutate(age = ifelse(age %in% c("B", "EB"), NA, as.numeric(as.character(age)))) %>%
      arrange(age) %>%
      mutate(
        age = ifelse(is.na(age), "B", as.character(age)),
        age = factor(age, levels = c(as.character(sort(unique(as.numeric(age[age != "B"])))), "B"))
      )
  } else {
    # Convert ID to factor to maintain order
    final_data_filtered[[x_axis_variable]] <- factor(final_data_filtered[[x_axis_variable]], levels = unique(final_data_filtered[[x_axis_variable]]))
  }
  
  # Reshape data into long format
  final_data_long <- tidyr::gather(final_data_filtered, variable, value, -all_of(x_axis_variable))
  
  # Create a custom order for the variable factor
  custom_order <- c("Pinaceae", "Picea", "Pinus", "Larix", "Abies")
  
  # Apply the custom order to the variable factor
  final_data_long$variable <- factor(final_data_long$variable, levels = custom_order)
  
  # Divide the data into "Pinaceae" and the rest
  plot_pinaceae <- ggplot(
    data = filter(final_data_long, variable == "Pinaceae"),
    aes_string(x = x_axis_variable, y = "value")
  ) +
    geom_bar(stat = "identity", position = "dodge", alpha = 0.6) +
    labs(
      title = new_site_name,
      subtitle = "Pinaceae - Absolute count",
      caption = "Source: Your Data",
      x = x_axis_variable,
      y = "Read count (Pinaceae)"
    ) +
    scale_y_continuous(
      name = "Read count",
      expand = expansion(mult = c(0, 0.1))
    ) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
  
  # Plot for species with variable y-axis limits (as current)
  plot_other_variable <- ggplot(
    data = filter(final_data_long, variable != "Pinaceae"),
    aes_string(x = x_axis_variable, y = "value", fill = "variable", color = "variable", group = "variable")
  ) +
    geom_bar(stat = "identity", position = "dodge", alpha = 0.6) +
    labs(
      subtitle = "Species - Absolute counts (Variable Y-Axis Limits)",
      caption = "Source: Your Data",
      x = x_axis_variable,
      y = "Read count",
      fill = "Species",
      color = "Species"
    ) +
    scale_color_manual(values = custom_colors) +
    scale_fill_manual(values = custom_colors) +
    facet_wrap(~variable, ncol = 1, scales = "free_y") +  # Allow y-axis to be free for each species
    theme(
      axis.text.x = element_text(angle = 45, hjust = 1),
      legend.position = "bottom"
    ) +
    scale_y_continuous(expand = expansion(mult = c(0, 0.1)))
  
  # Plot for species with uniform y-axis limits
  # First, find the maximum value among all species
  max_value <- max(filter(final_data_long, variable != "Pinaceae")$value, na.rm = TRUE)
  
  plot_other_uniform <- ggplot(
    data = filter(final_data_long, variable != "Pinaceae"),
    aes_string(x = x_axis_variable, y = "value", fill = "variable", color = "variable", group = "variable")
  ) +
    geom_bar(stat = "identity", position = "dodge", alpha = 0.6) +
    labs(
      subtitle = "Species - Absolute counts (Uniform Y-Axis Limits)",
      caption = "Source: Your Data",
      x = x_axis_variable,
      y = "Read count",
      fill = "Species",
      color = "Species"
    ) +
    scale_color_manual(values = custom_colors) +
    scale_fill_manual(values = custom_colors) +
    facet_wrap(~variable, ncol = 1, scales = "fixed") +  # Use fixed scales for uniform y-axis limits
    theme(
      axis.text.x = element_text(angle = 45, hjust = 1),
      legend.position = "bottom"
    ) +
    scale_y_continuous(
      expand = expansion(mult = c(0, 0.1)),
      limits = c(0, max_value * 1.1)  # Set y-axis limits based on maximum value
    )
  
  # Combine the plots
  combined_plot_variable <- plot_grid(
    plot_pinaceae,
    plot_other_variable,
    ncol = 1,
    align = "v",
    rel_heights = c(1, 2)
  )
  
  combined_plot_uniform <- plot_grid(
    plot_pinaceae,
    plot_other_uniform,
    ncol = 1,
    align = "v",
    rel_heights = c(1, 2)
  )
  
  # Print the combined plots
  print(combined_plot_variable)
  print(combined_plot_uniform)
  
  # Save the ggplots as PNG images with 300 DPI and fixed size
  ggsave(
    filename = file.path(
      base_dir,
      "results/6_7_read_counts",
      site_name,
      paste0(site_name, "_combined_count_plot_variable_y.png")
    ),
    plot = combined_plot_variable,
    width = 10,
    height = 8,
    dpi = 300
  )
  
  ggsave(
    filename = file.path(
      base_dir,
      "results/6_7_read_counts",
      site_name,
      paste0(site_name, "_combined_count_plot_uniform_y.png")
    ),
    plot = combined_plot_uniform,
    width = 10,
    height = 8,
    dpi = 300
  )
}

# Loop through each site and process
for (site_name in sites) {
  process_site(site_name, site_name_mapping)
}







--------------------------------------------------------------------------------
  
#SCRIPT 2: UNIFORM AND VARIABLE Y-AXIS PLOT COMBINED
  
# Load necessary libraries
library(tidyverse)
library(viridis)
library(cowplot)
library(stringr)

# Set the base directory
base_dir <- "//dmawi.de/potsdam/data/bioing/user/smeucci/PROJECTS/7_Pinaceae_capture/Bioinformatics"

# Read the mapping of folder names to new names
mapping_file_path <- file.path(base_dir, "results/6_7_read_counts", "new_names.txt")

# Try reading the mapping file with different separators and encoding
mapping_file <- read.table(
  mapping_file_path,
  header = TRUE,
  sep = "\t",
  stringsAsFactors = FALSE,
  fileEncoding = "UTF-8",
  fill = TRUE,
  strip.white = TRUE
)

# Check if the mapping_file has the correct number of columns
if (ncol(mapping_file) < 2) {
  # Try reading with space as separator
  mapping_file <- read.table(
    mapping_file_path,
    header = TRUE,
    sep = "",
    stringsAsFactors = FALSE,
    fileEncoding = "UTF-8",
    fill = TRUE,
    strip.white = TRUE
  )
}

# Print the mapping file to verify columns and content
print("Mapping file contents:")
print(mapping_file)

# Ensure that the column names are correct
colnames(mapping_file) <- c("folder_name", "new_name")

# Remove any rows with NA in folder_name or new_name
mapping_file <- mapping_file[!is.na(mapping_file$folder_name) & !is.na(mapping_file$new_name), ]

# Create a named vector or a lookup table
site_name_mapping <- setNames(mapping_file$new_name, mapping_file$folder_name)

# List of site names extracted from the mapping file
sites <- as.character(mapping_file$folder_name)

# Verify the site names
print("Site names (folder names):")
print(sites)

# Define the function to process each site
process_site <- function(site_name, site_name_mapping) {
  # Ensure site_name is a character string
  site_name <- as.character(site_name)
  
  # Get the new name for the site
  new_site_name <- site_name_mapping[site_name]
  
  # Handle cases where the site_name might not be in the mapping
  if (is.na(new_site_name)) {
    warning(paste("No mapping found for site:", site_name, "- using original name"))
    new_site_name <- site_name
  }
  
  # Print the site being processed
  print(paste("Processing site:", site_name, "with new name:", new_site_name))
  
  # Define the paths to the data files
  pinaceae_file <- file.path(base_dir, "results/6_7_read_counts", site_name, "reads_count_pinaceae.csv")
  species_file <- file.path(base_dir, "results/6_7_read_counts", site_name, "reads_count_species.csv")
  meta_file <- file.path(base_dir, "scripts/Pipeline/rename_samples", site_name, paste0(site_name, "_meta_file.txt"))
  
  # Check if files exist before proceeding
  if (!file.exists(pinaceae_file)) {
    warning(paste("Pinaceae file does not exist:", pinaceae_file))
    return(NULL)
  }
  if (!file.exists(species_file)) {
    warning(paste("Species file does not exist:", species_file))
    return(NULL)
  }
  if (!file.exists(meta_file)) {
    warning(paste("Meta file does not exist:", meta_file))
    return(NULL)
  }
  
  # Read the original CSV file
  original_data <- read_csv(pinaceae_file, show_col_types = FALSE)
  
  # Step 1: Rename the columns to "ID" and "reads"
  colnames(original_data) <- c("ID", "reads")
  
  # Group by the common part of the ID (until the underscore "_") and sum the "reads" numbers
  merged_data <- original_data %>%
    group_by(ID = sub("_(.+)", "", ID)) %>%
    summarise(Pinaceae = sum(reads)) %>%
    ungroup()
  
  # Read the additional text file (tab-delimited) without a header
  additional_data <- read.delim(
    meta_file,
    header = FALSE,
    stringsAsFactors = FALSE,
    fileEncoding = "UTF-8"
  )
  
  # Rename the columns in the additional data
  colnames(additional_data) <- c("file", "library", "age", "lake", "name")
  
  # Merge the data frames based on the "ID" column in the original data and the "library" column in the additional data
  merged_data <- merge(
    merged_data,
    additional_data,
    by.x = "ID",
    by.y = "library",
    all.x = TRUE
  )
  
  # Remove the "file" and "name" columns
  merged_data <- merged_data %>%
    select(-file, -name)
  
  # Read the third data from the CSV file
  third_data <- read.csv(species_file, stringsAsFactors = FALSE)
  
  # Extract the numeric range and sample ID from BAM.File
  third_data <- third_data %>%
    mutate(
      numeric_range = str_extract(BAM.File, "-\\d+-\\d+\\.bam$"),
      ID_full = str_extract(BAM.File, "^(.*?)_combined"),
      ID = sub("^(.*?)_(.*?)_combined$", "\\1", ID_full)
    )
  
  # Map the numeric ranges to species
  third_data$Species <- case_when(
    third_data$numeric_range == "-1-122588.bam" ~ "Larix",
    third_data$numeric_range == "-122589-239988.bam" ~ "Pinus",
    third_data$numeric_range == "-239989-361212.bam" ~ "Abies",
    third_data$numeric_range == "-361213-485324.bam" ~ "Picea",
    TRUE ~ NA_character_
  )
  
  # Remove entries with NA in Species
  third_data <- third_data %>%
    filter(!is.na(Species))
  
  # Pivot the data to wide format with separate columns for species
  wide_data <- third_data %>%
    select(ID, Species, Mapped.Reads) %>%
    group_by(ID, Species) %>%
    summarise(Mapped.Reads = sum(Mapped.Reads), .groups = 'drop') %>%
    pivot_wider(
      names_from = Species,
      values_from = Mapped.Reads,
      values_fill = 0
    )
  
  # Merge the wide data with the merged data based on the "ID" column
  final_data <- left_join(merged_data, wide_data, by = "ID")
  
  # Add missing species columns with zeros
  species_list <- c("Larix", "Pinus", "Abies", "Picea")
  for (species in species_list) {
    if (!species %in% colnames(final_data)) {
      final_data[[species]] <- 0
    }
  }
  
  # Fill missing values with 0
  final_data[is.na(final_data)] <- 0
  
  # Add a new column "Pinaceae_sum" as the sum of species counts
  final_data <- final_data %>%
    mutate(Pinaceae_sum = Larix + Pinus + Abies + Picea)
  
  # Add new columns for relative abundances
  final_data <- final_data %>%
    mutate(
      Larix_rel = round(Larix / Pinaceae_sum, 2),
      Pinus_rel = round(Pinus / Pinaceae_sum, 2),
      Abies_rel = round(Abies / Pinaceae_sum, 2),
      Picea_rel = round(Picea / Pinaceae_sum, 2)
    )
  
  # Replace NaN with 0 in the relative abundance columns
  final_data <- final_data %>%
    mutate(
      Larix_rel = ifelse(is.na(Larix_rel), 0, Larix_rel),
      Pinus_rel = ifelse(is.na(Pinus_rel), 0, Pinus_rel),
      Abies_rel = ifelse(is.na(Abies_rel), 0, Abies_rel),
      Picea_rel = ifelse(is.na(Picea_rel), 0, Picea_rel)
    )
  
  # Write the final merged data to a CSV file
  write.csv(
    final_data,
    file.path(base_dir, "results/6_7_read_counts", site_name, paste0(site_name, "_final_merged_data.csv")),
    row.names = FALSE
  )
  
  # Plotting code
  # Set Viridis color palette
  custom_colors <- viridis(5)
  
  # Use 'age' as the x-axis variable for all sites
  x_axis_variable <- "age"
  
  # Filter the data to select only the relevant variables
  final_data_filtered <- final_data %>%
    select(all_of(x_axis_variable), Pinaceae, Larix, Pinus, Abies, Picea) %>%
    mutate(
      age_numeric = as.numeric(as.character(age)),  # Convert age to numeric
      age_non_numeric = ifelse(is.na(age_numeric), as.character(age), NA)  # Extract non-numeric ages
    ) %>%
    arrange(age_numeric) %>%
    mutate(
      age_combined = ifelse(!is.na(age_numeric), as.character(age_numeric), age_non_numeric),  # Combine numeric and non-numeric ages
      age = factor(age_combined, levels = unique(age_combined))  # Create factor with correct levels
    ) %>%
    select(-age_numeric, -age_non_numeric, -age_combined)  # Remove helper columns if desired
  
  # Reshape data into long format
  final_data_long <- tidyr::gather(final_data_filtered, variable, value, -all_of(x_axis_variable))
  
  # Create a custom order for the variable factor
  custom_order <- c("Pinaceae", "Picea", "Pinus", "Larix", "Abies")
  
  # Apply the custom order to the variable factor
  final_data_long$variable <- factor(final_data_long$variable, levels = custom_order)
  
  # Divide the data into "Pinaceae" and the rest
  plot_pinaceae <- ggplot(
    data = filter(final_data_long, variable == "Pinaceae"),
    aes_string(x = x_axis_variable, y = "value")
  ) +
    geom_bar(stat = "identity", position = "dodge", alpha = 0.6) +
    labs(
      title = new_site_name,
      subtitle = "Pinaceae - Absolute count",
      caption = "Source: Your Data",
      x = x_axis_variable,
      y = "Read count (Pinaceae)"
    ) +
    scale_y_continuous(
      name = "Read count",
      expand = expansion(mult = c(0, 0.1))
    ) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
  
  # Plot for species with uniform y-axis limits
  # First, find the maximum value among all species
  max_value <- max(filter(final_data_long, variable != "Pinaceae")$value, na.rm = TRUE)
  
  plot_other_uniform <- ggplot(
    data = filter(final_data_long, variable != "Pinaceae"),
    aes_string(x = x_axis_variable, y = "value", fill = "variable", color = "variable", group = "variable")
  ) +
    geom_bar(stat = "identity", position = "dodge", alpha = 0.6) +
    labs(
      subtitle = "Species - Absolute counts (Uniform Y-Axis Limits)",
      caption = "Source: Your Data",
      x = x_axis_variable,
      y = "Read count",
      fill = "Species",
      color = "Species"
    ) +
    scale_color_manual(values = custom_colors) +
    scale_fill_manual(values = custom_colors) +
    facet_wrap(~variable, ncol = 1, scales = "fixed") +  # Use fixed scales for uniform y-axis limits
    theme(
      axis.text.x = element_text(angle = 45, hjust = 1),
      legend.position = "bottom"
    ) +
    scale_y_continuous(
      expand = expansion(mult = c(0, 0.1)),
      limits = c(0, max_value * 1.1)  # Set y-axis limits based on maximum value
    )
  
  # Plot for species with variable y-axis limits
  plot_other_variable <- ggplot(
    data = filter(final_data_long, variable != "Pinaceae"),
    aes_string(x = x_axis_variable, y = "value", fill = "variable", color = "variable", group = "variable")
  ) +
    geom_bar(stat = "identity", position = "dodge", alpha = 0.6) +
    labs(
      subtitle = "Species - Absolute counts (Variable Y-Axis Limits)",
      caption = "Source: Your Data",
      x = x_axis_variable,
      y = "Read count",
      fill = "Species",
      color = "Species"
    ) +
    scale_color_manual(values = custom_colors) +
    scale_fill_manual(values = custom_colors) +
    facet_wrap(~variable, ncol = 1, scales = "free_y") +  # Allow y-axis to be free for each species
    theme(
      axis.text.x = element_text(angle = 45, hjust = 1),
      legend.position = "bottom"
    ) +
    scale_y_continuous(expand = expansion(mult = c(0, 0.1)))
  
  # Combine the plots into a single plot
  combined_plot <- plot_grid(
    plot_pinaceae,
    plot_other_uniform,
    plot_other_variable,
    ncol = 1,
    align = "v",
    rel_heights = c(1, 2, 2)
  )
  
  # Print the combined plot
  print(combined_plot)
  
  # Save the ggplot as a PNG image with 300 DPI and fixed size
  ggsave(
    filename = file.path(
      base_dir,
      "results/6_7_read_counts",
      site_name,
      paste0(site_name, "_combined_count_plot_both_y.png")
    ),
    plot = combined_plot,
    width = 10,
    height = 12,  # Adjusted height to accommodate the additional plot
    dpi = 300
  )
  
  # Save the ggplot as a PDF with 300 DPI and fixed size
  ggsave(
    filename = file.path(
      base_dir,
      "results/6_7_read_counts",
      site_name,
      paste0(site_name, "_combined_count_plot_both_y.pdf")
    ),
    plot = combined_plot,
    width = 10,
    height = 12,  # Adjusted height to accommodate the additional plot
    dpi = 300,
    device = cairo_pdf  # Ensures high-quality PDF output
  )
}


# Loop through each site and process
for (site_name in sites) {
  process_site(site_name, site_name_mapping)
}
