#!/bin/bash

#===========================================================================
# SLURM batch script for running shotgun/capture pipeline - Step 2
# Processes multiple samples sequentially on a fat node
# Only modify the > USER CONFIG < section to match your setup
#===========================================================================

#SBATCH --job-name=2_KRAKEN_KRONA                   # Job name (customize as needed)
#SBATCH --time=12:00:00                                # Wall time (adjust to your needs)
#SBATCH --cpus-per-task=32                             # Number of CPU cores to request
#SBATCH --mem=700G                                     # Total memory per task

## Optional settings â€” uncomment and edit as required by your cluster setup:
##SBATCH --account=your_project_account                # Project/account name (if required)
##SBATCH --partition=fat                               # Partition or node type (e.g., fat, smp, gpu)
##SBATCH --qos=12h                                     # Quality of Service (optional)
##SBATCH --mail-user=your_email@example.com            # Email for job notifications
##SBATCH --mail-type=END                               # Notification type (e.g., BEGIN, END, FAIL)


#===============================
# USER CONFIG (edit as needed)
#===============================

DB="path-to-kraken-database"      # Path to Kraken2 database
CONFIDENCE="0.5"                  # Kraken2 confidence score threshold
DEDUPE="TRUE"                     # Whether to use deduplicated files
OUTDIR="output"                   # Output directory

#=================================
# SYSTEM CONFIG (do not modify)
#=================================

WORK=${PWD}                       # Working directory (automatically set)
OUT_FASTP="out.fastp"
OUT_DEDUPE="out.dedupe"
OUT_KRAKEN="out.kraken2"
OUT_KRONA="out.krona"

KRAKEN2="kraken2/2.1.2"
KRONA="krona/2.8.1"

END_R1="_fastp_R1.fq.gz"
END_R2="_fastp_R2.fq.gz"
END_MERGED="_fastp_merged.fq.gz"

END_R1_DD="_fastp_dedupe__R1.fq.gz"
END_R2_DD="_fastp_dedupe__R2.fq.gz"
END_MERGED_DD="_fastp_dedupe_merged.fq.gz"

CPU=${SLURM_CPUS_PER_TASK}

# Set thread-related environment variables
export OMP_NUM_THREADS=${SLURM_CPUS_PER_TASK}
export SRUN_CPUS_PER_TASK=${SLURM_CPUS_PER_TASK}


# prepare environment
#===================================================================
mkdir -p ${OUTDIR}/${OUT_KRAKEN}
mkdir -p ${OUTDIR}/${OUT_KRONA}

# tasks to be performed
#===================================================================

# KRAKEN2
#----------
if [ ${DEDUPE} == "FALSE" ]; then
	module load ${KRAKEN2}
	for fq in ${OUTDIR}/${OUT_FASTP}/*${END_MERGED} 
	do 
		BASE=${fq##*/}
		ID=${BASE%${END_MERGED}}
		srun kraken2 --confidence ${CONFIDENCE} --db ${DB} ${fq} --threads ${CPU} --gzip-compressed --output ${OUTDIR}/${OUT_KRAKEN}/${ID}_conf${CONFIDENCE}_merged.kraken --report ${OUTDIR}/${OUT_KRAKEN}/${ID}_conf${CONFIDENCE}_merged.kraken.report
		srun kraken2 --confidence ${CONFIDENCE} --db ${DB} --paired ${OUTDIR}/${OUT_FASTP}/${ID}${END_R1} ${OUTDIR}/${OUT_FASTP}/${ID}${END_R2} --threads ${CPU} --gzip-compressed --output ${OUTDIR}/${OUT_KRAKEN}/${ID}_conf${CONFIDENCE}_paired.kraken --report ${OUTDIR}/${OUT_KRAKEN}/${ID}_conf${CONFIDENCE}_paired.kraken.report
	done
	module unload ${KRAKEN2}
else
	module load ${KRAKEN2}
	for fq in ${OUTDIR}/${OUT_DEDUPE}/*${END_MERGED_DD} 
	do 
		BASE=${fq##*/}
		ID=${BASE%${END_MERGED_DD}}
		srun kraken2 --confidence ${CONFIDENCE} --db ${DB} ${fq} --threads ${CPU} --gzip-compressed --output ${OUTDIR}/${OUT_KRAKEN}/${ID}_conf${CONFIDENCE}_merged.kraken --report ${OUTDIR}/${OUT_KRAKEN}/${ID}_conf${CONFIDENCE}_merged.kraken.report
		srun kraken2 --confidence ${CONFIDENCE} --db ${DB} --paired ${OUTDIR}/${OUT_DEDUPE}/${ID}${END_R1_DD} ${OUTDIR}/${OUT_DEDUPE}/${ID}${END_R2_DD} --threads ${CPU} --gzip-compressed --output ${OUTDIR}/${OUT_KRAKEN}/${ID}_conf${CONFIDENCE}_paired.kraken --report ${OUTDIR}/${OUT_KRAKEN}/${ID}_conf${CONFIDENCE}_paired.kraken.report
	done
	module unload ${KRAKEN2}
fi

# KRONA
#----------

module load ${KRONA}
for kraken in ${OUTDIR}/${OUT_KRAKEN}/*.kraken 
do 
	BASE=${kraken##*/}
	ID=${BASE%.kraken}
	srun ktImportTaxonomy -q 2 -t 3 ${kraken} -o ${OUTDIR}/${OUT_KRONA}/${ID}.html
done

srun ktImportTaxonomy -q 2 -t 3 ${OUTDIR}/${OUT_KRAKEN}/*.kraken -o ${OUTDIR}/${OUT_KRONA}/KRONA_plots_combined.html

module unload ${KRONA}
