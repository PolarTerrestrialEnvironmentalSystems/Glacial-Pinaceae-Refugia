#!/bin/bash

#=============================================================================
# slurm batch script to map Pinaceae extracted reads from kraken2 to a concatenated genome
# on several sample using arrays
# slurm options and variables under >set required variables< 
# have to be modified by the user
#=============================================================================

#SBATCH --account=
#SBATCH --job-name=4_mapping_to_concatenate_btoko_filter
#SBATCH --time=24:00:00 ### set the time
#SBATCH --qos=48h ## set the range your time demand is in (not mandatory)
#SBATCH --partition=smp ## set the node
#SBATCH --cpus-per-task=32
#SBATCH --mail-user=
#SBATCH --mail-type=END


# set required variables (adapt according to your own requirements)
#===================================================================

#PREPARE A META FILE FOR RUNNING- EXAMPLE BELOW- DO NOT INCLUDE COL NAMES IN FILE (final_sample_name(the last column) should contain lake,library-id,age, respectively
#EXAMPLE: btoko_meta_file.txt
#fastp_sample_name	library-id	age lake	final_sample_name
#JK079L-1_S1_fastp_dedupe_merged.fq.gz	JK079L-1	33716	btoko	btoko_JK079L-1_33716
#JK079L-10-WDH_S10_fastp_dedupe_merged.fq.gz	JK079L-10 	22882	btoko	btoko_JK079L-10_22882
#JK079L-11-WDH_S11_fastp_dedupe_merged.fq.gz	JK079L-11 	20599	btoko	btoko_JK079L-11_20599
#JK079L-12-WDH_S12_fastp_dedupe_merged.fq.gz	JK079L-12 	19419	btoko	btoko_JK079L-12_19419
#JK079L-13-WDH_S13_fastp_dedupe_merged.fq.gz	JK079L-13 	18012	btoko	btoko_JK079L-13_18012

CURRENT=${PWD}
META_FILE="path-to-meta-file/btoko_meta_file.txt"

#IF TAXA-SPECIFIC READS EXTRACTION; THEN YES, OTHERWISE; LEAVE IT BLANK
EXTRACTION="YES"
#IF EXTRACTION: YES, YOU SHOULD SPECIFY WHICH TAXA IS EXTRACTED FROM THE KRAKEN
TAXA="tax3318" #Pinaceae ID. 

#REFERENCE_GENOME
COPY_REF_DIR="path-to-concatenated-genome/concatenate_reference_larix_gmelinii_pinus_pumila_abies_sibirica_picea_obovata.fasta"
srun cp ${COPY_REF_DIR} ${CURRENT}/.
REF="concatenate_reference_larix_gmelinii_pinus_pumila_abies_sibirica_picea_obovata.fasta"


#-----DO NOT CHANGE THESE VARIABLES-----#
BWA="bwa/0.7.17"
SAMTOOLS="samtools/1.16.1"
PICARD="picard/3.1.0"
BAMTOOLS="bamtools/2.5.2"
KRAKENTOOLS="krakentools/1.2"

#module load bio/${PICARD}
module load ${BAMTOOLS}
module load ${BWA}
module load ${SAMTOOLS}
module load ${KRAKENTOOLS}
module load ${PICARD}
CPU=${SLURM_CPUS_PER_TASK}

#PARAMETERS OF BWA
SEED_LENGTH="1024"
MAX_GAP="2"
MAX_DIFF="0.01"

#OUTPUT FILES
OUTPUT="output"
OUT_FASTP="out.dedupe"
OUT_KRAKEN="out.kraken2"
EXT_KRAKEN_MERGED="out.read_extract_pinaceae"
EXT_KRAKEN_PAIRED="out.read_extract_pinaceae"

#STARTING
END_MERGED="_fastp_dedupe_merged.fq.gz"
END_R1="_fastp_dedupe__R1.fq.gz"
END_R2="_fastp_dedupe__R2.fq.gz"
END_KRAKEN_MERGED="_conf0.5_merged.kraken"
END_KRAKEN_M_REPORT="_conf0.5_merged.kraken.report"
END_KRAKEN_PAIRED="_conf0.5_paired.kraken"
END_KRAKEN_P_REPORT="_conf0.5_paired.kraken.report"

#EXTRACTED KRAKEN_OUTPUTS
END_merged_1="extract_merged.fq"
END_R1_1="extract_R1.fq"
END_R2_2="extract_R2.fq"

#create output directory
#merged result
mkdir -p ${CURRENT}/${OUTPUT}/${OUT_KRAKEN}/${EXT_KRAKEN_MERGED}

#create output directory
#Paired file kraken result
mkdir -p ${CURRENT}/${OUTPUT}/${OUT_KRAKEN}/${EXT_KRAKEN_PAIRED}


#CREATE REFERENCE DIRECTORY AND MOVE REFERENCE GENOME INTO THE DIRECTORY
REF_DIR="genome_index"

mkdir -p ${CURRENT}/${REF_DIR}
mv ${REF} ${CURRENT}/${REF_DIR}/.


OUT_BWA=".bwa"
OUT_SAI=".sai"
OUT_SAM=".sam"
OUT_BAM=".bam"
OUT_FLAGSTAT=".flagstat"
OUT_SORTED=".sorted.bam"
OUT_MARKED=".sorted.rem_marked.bam"
OUT_COMBINED=".sorted.bam"
OUT_M_METRICS=".txt"


if [[ -n "$(find ${CURRENT}/${REF_DIR} -name ${REF})" ]]
then
	echo "${REF} found in ${CURRENT}/${REF_DIR}"
else
	echo "${REF} not found in ${CURRENT}/${REF_DIR}"
fi

if [[ -n "$(find ${CURRENT}/${REF_DIR} -name '*.bwt')" ]]
then
	echo "genome index found in ${CURRENT}/${REF_DIR}"
else
	srun bwa index ${CURRENT}/${REF_DIR}/${REF}
fi

#CREATE DIRECTORY 
name_dir=$(head -n1 ${CURRENT}/${REF_DIR}/${REF})
DIR_EXT=$(head -n1 ${CURRENT}/${REF_DIR}/${REF} | tr -d '\r' | cut -c2-)
#DIR_EXT=$(echo "${name_dir%.*}" | cut -c2-)

TMP="${DIR_EXT}_temp_${TAXA}"
FINAL_BAM="${DIR_EXT}_bam_files_${TAXA}"
FLAGSTAT="${DIR_EXT}_map_stats_${TAXA}"

mkdir -p ${CURRENT}/${OUTPUT}/${TMP}
mkdir -p ${CURRENT}/${OUTPUT}/${FINAL_BAM}
mkdir -p ${CURRENT}/${OUTPUT}/${FLAGSTAT}

#-----DO NOT CHANGE THESE VARIABLES-----#

if [ ${EXTRACTION} == "YES" ]; then
IFS=$'\n' read -d '' -r -a input < ${META_FILE}
for ((j=0;j<${#input[@]};j++));
       do
            COL_MERGED=$(echo "${input[j]}" | awk '{print $1}')
            ID=${COL_MERGED%${END_MERGED}}
            echo "First sample:" "${ID}"
            echo ""

            echo "next inputs:"
            echo ""
            echo "-k: " "${CURRENT}/${OUTPUT}/${OUT_KRAKEN}/${ID}${END_KRAKEN_MERGED}"
            echo "-s: " "${CURRENT}/${OUTPUT}/${OUT_FASTP}/${ID}${END_MERGED}"
            echo "-r: " "${CURRENT}/${OUTPUT}/${OUT_KRAKEN}/${ID}${END_KRAKEN_M_REPORT}"
            echo ""

            srun extract_kraken_reads.py -k ${CURRENT}/${OUTPUT}/${OUT_KRAKEN}/${ID}${END_KRAKEN_MERGED} -s ${CURRENT}/${OUTPUT}/${OUT_FASTP}/${ID}${END_MERGED} -t ${TAXA} -r ${CURRENT}/${OUTPUT}/${OUT_KRAKEN}/${ID}${END_KRAKEN_M_REPORT} -o ${CURRENT}/${OUTPUT}/${OUT_KRAKEN}/${EXT_KRAKEN_MERGED}/${ID}_${TAXA}_${END_merged_1} --include-children --fastq-output

            echo ""
            echo "next inputs:"
            echo "-k: " "${CURRENT}/${OUTPUT}/${OUT_KRAKEN}/${ID}${END_KRAKEN_PAIRED}"
            echo "-s1: " "${CURRENT}/${OUTPUT}/${OUT_FASTP}/${ID}${END_R1}"
            echo "-s2: " "${CURRENT}/${OUTPUT}/${OUT_FASTP}/${ID}${END_R2}"
            echo "-r: " "${CURRENT}/${OUTPUT}/${OUT_KRAKEN}/${ID}${END_KRAKEN_P_REPORT} "
            echo ""

            srun extract_kraken_reads.py -k ${CURRENT}/${OUTPUT}/${OUT_KRAKEN}/${ID}${END_KRAKEN_PAIRED} -s1 ${CURRENT}/${OUTPUT}/${OUT_FASTP}/${ID}${END_R1} -s2 ${CURRENT}/${OUTPUT}/${OUT_FASTP}/${ID}${END_R2} -t ${TAXA} -r ${CURRENT}/${OUTPUT}/${OUT_KRAKEN}/${ID}${END_KRAKEN_P_REPORT} -o ${CURRENT}/${OUTPUT}/${OUT_KRAKEN}/${EXT_KRAKEN_PAIRED}/${ID}_${TAXA}_${END_R1_1} -o2 ${CURRENT}/${OUTPUT}/${OUT_KRAKEN}/${EXT_KRAKEN_PAIRED}/${ID}_${TAXA}_${END_R2_2} --include-children --fastq-output
       done
for ((j=0;j<${#input[@]};j++));
        do
                COL_MERGED=$(echo "${input[j]}" | awk '{print $1}')
                ID=${COL_MERGED%${END_MERGED}}
                echo "Alignment..."
                echo ""
                #srun bwa mem ${REF} ${CURRENT}/${OUTPUT}/${OUT_KRAKEN}/${EXT_KRAKEN_MERGED}/${ID}_${TAXA}_${END_merged_1} > ${CURRENT}/${OUTPUT}/out.sam
                srun bwa aln ${CURRENT}/${REF_DIR}/${REF} ${CURRENT}/${OUTPUT}/${OUT_KRAKEN}/${EXT_KRAKEN_MERGED}/${ID}_${TAXA}_${END_merged_1} -f ${CURRENT}/${OUTPUT}/${TMP}/${ID}_merged${OUT_BWA} -t ${CPU} -l ${SEED_LENGTH} -o ${MAX_GAP} -n ${MAX_DIFF} > ${CURRENT}/${OUTPUT}/${TMP}/${ID}_merged${OUT_SAI}
                srun bwa samse ${CURRENT}/${REF_DIR}/${REF} ${CURRENT}/${OUTPUT}/${TMP}/${ID}_merged${OUT_BWA} ${CURRENT}/${OUTPUT}/${OUT_KRAKEN}/${EXT_KRAKEN_MERGED}/${ID}_${TAXA}_${END_merged_1} -f ${CURRENT}/${OUTPUT}/${TMP}/${ID}_merged${OUT_SAM}

                echo "forward reads"
                echo ""
                srun bwa aln ${CURRENT}/${REF_DIR}/${REF} ${CURRENT}/${OUTPUT}/${OUT_KRAKEN}/${EXT_KRAKEN_PAIRED}/${ID}_${TAXA}_${END_R1_1} -f ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R1${OUT_BWA} -t ${CPU} -l ${SEED_LENGTH} -o ${MAX_GAP} -n ${MAX_DIFF} > ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R1${OUT_SAI}
                srun bwa samse ${CURRENT}/${REF_DIR}/${REF} ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R1${OUT_BWA} ${CURRENT}/${OUTPUT}/${OUT_KRAKEN}/${EXT_KRAKEN_PAIRED}/${ID}_${TAXA}_${END_R1_1} -f ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R1${OUT_SAM}

                echo "reverse reads"
                echo ""
                srun bwa aln ${CURRENT}/${REF_DIR}/${REF} ${CURRENT}/${OUTPUT}/${OUT_KRAKEN}/${EXT_KRAKEN_PAIRED}/${ID}_${TAXA}_${END_R2_2} -f ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R2${OUT_BWA} -t ${CPU} -l ${SEED_LENGTH} -o ${MAX_GAP} -n ${MAX_DIFF} > ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R2${OUT_SAI}
                srun bwa samse ${CURRENT}/${REF_DIR}/${REF} ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R2${OUT_BWA} ${CURRENT}/${OUTPUT}/${OUT_KRAKEN}/${EXT_KRAKEN_PAIRED}/${ID}_${TAXA}_${END_R2_2} -f ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R2${OUT_SAM}

                echo "samtool is starting...."
                echo ""
                srun samtools view -SbF 4 ${CURRENT}/${OUTPUT}/${TMP}/${ID}_merged${OUT_SAM} > ${CURRENT}/${OUTPUT}/${TMP}/${ID}_merged${OUT_BAM}
                srun samtools view -SbF 4 ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R1${OUT_SAM} > ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R1${OUT_BAM}
                srun samtools view -SbF 4 ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R2${OUT_SAM} > ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R2${OUT_BAM}
				
				# bamtools filter commands
				srun bamtools filter -mapQuality '>=25' -length '>=35' -in ${CURRENT}/${OUTPUT}/${TMP}/${ID}_merged${OUT_BAM} -out ${CURRENT}/${OUTPUT}/${TMP}/${ID}_merged_filtered${OUT_BAM}
				srun bamtools filter -mapQuality '>=25' -length '>=35' -in ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R1${OUT_BAM} -out ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R1_filtered${OUT_BAM}
				srun bamtools filter -mapQuality '>=25' -length '>=35' -in ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R2${OUT_BAM} -out ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R2_filtered${OUT_BAM}

                srun samtools sort ${CURRENT}/${OUTPUT}/${TMP}/${ID}_merged_filtered${OUT_BAM} > ${CURRENT}/${OUTPUT}/${TMP}/${ID}_merged_filtered${OUT_SORTED}
                srun samtools sort ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R1_filtered${OUT_BAM} > ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R1_filtered${OUT_SORTED}
                srun samtools sort ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R2_filtered${OUT_BAM} > ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R2_filtered${OUT_SORTED}

                srun samtools index ${CURRENT}/${OUTPUT}/${TMP}/${ID}_merged_filtered${OUT_SORTED}
                srun samtools index ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R1_filtered${OUT_SORTED}
                srun samtools index ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R2_filtered${OUT_SORTED}

                echo "Mark Duplicates...."
                echo ""
                srun picard MarkDuplicates I=${CURRENT}/${OUTPUT}/${TMP}/${ID}_merged_filtered${OUT_SORTED} O=${CURRENT}/${OUTPUT}/${TMP}/${ID}_merged_filtered${OUT_MARKED} M=${CURRENT}/${OUTPUT}/${TMP}/${ID}_merged_filtered${OUT_M_METRICS} REMOVE_DUPLICATES=TRUE VALIDATION_STRINGENCY=LENIENT
                srun picard MarkDuplicates I=${CURRENT}/${OUTPUT}/${TMP}/${ID}_R1_filtered${OUT_SORTED} O=${CURRENT}/${OUTPUT}/${TMP}/${ID}_R1_filtered${OUT_MARKED} M=${CURRENT}/${OUTPUT}/${TMP}/${ID}_R1_filtered${OUT_M_METRICS} REMOVE_DUPLICATES=TRUE VALIDATION_STRINGENCY=LENIENT
                srun picard MarkDuplicates I=${CURRENT}/${OUTPUT}/${TMP}/${ID}_R2_filtered${OUT_SORTED} O=${CURRENT}/${OUTPUT}/${TMP}/${ID}_R2_filtered${OUT_MARKED} M=${CURRENT}/${OUTPUT}/${TMP}/${ID}_R2_filtered${OUT_M_METRICS} REMOVE_DUPLICATES=TRUE VALIDATION_STRINGENCY=LENIENT
		
		conda deactivate
                echo "Merge bams into one.."
                echo ""
                srun bamtools merge -in ${CURRENT}/${OUTPUT}/${TMP}/${ID}_merged_filtered${OUT_MARKED} -in ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R1_filtered${OUT_MARKED} -in ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R2_filtered${OUT_MARKED} -out ${CURRENT}/${OUTPUT}/${TMP}/${ID}_combined${OUT_MARKED}

                srun samtools sort ${CURRENT}/${OUTPUT}/${TMP}/${ID}_combined${OUT_MARKED} > ${CURRENT}/${OUTPUT}/${TMP}/${ID}_combined${OUT_COMBINED}

                lib_id=$(echo "${input[j]}" | awk '{print $2}')
                fixed_sample_name=$(echo "${input[j]}" | awk '{print $5}')
                samp2=${fixed_sample_name%%.*}

                echo "Adding read groups for variant calling..."
                echo ""
                srun picard AddOrReplaceReadGroups INPUT=${CURRENT}/${OUTPUT}/${TMP}/${ID}_combined${OUT_COMBINED} OUTPUT=${CURRENT}/${OUTPUT}/${FINAL_BAM}/${ID}_combined_final${OUT_COMBINED} RGID=${samp2} RGLB=${lib_id} RGPL=Illumina RGSM=${samp2} RGPU=1
				srun samtools view -SbF 4 ${CURRENT}/${OUTPUT}/${FINAL_BAM}/${ID}_combined_final${OUT_COMBINED} > ${CURRENT}/${OUTPUT}/${FINAL_BAM}/${ID}_combined_final_extracted${OUT_COMBINED}
				srun samtools flagstat ${CURRENT}/${OUTPUT}/${FINAL_BAM}/${ID}_combined_final${OUT_COMBINED} > ${CURRENT}/${OUTPUT}/${FLAGSTAT}/${ID}_combined_all${OUT_FLAGSTAT}
				srun samtools flagstat ${CURRENT}/${OUTPUT}/${FINAL_BAM}/${ID}_combined_final_extracted${OUT_COMBINED} > ${CURRENT}/${OUTPUT}/${FLAGSTAT}/${ID}_combined_extracted${OUT_FLAGSTAT}

                echo "First loop just finished"
                echo ""
        done
else
	IFS=$'\n' read -d '' -r -a input < ${META_FILE}
	for ((j=0;j<${#input[@]};j++));
		do
                COL_MERGED=$(echo "${input[j]}" | awk '{print $1}')
                ID=${COL_MERGED%${END_MERGED}}
                echo "Alignment..."
                echo ""                
                srun bwa aln ${CURRENT}/${REF_DIR}/${REF} ${CURRENT}/${OUTPUT}/${OUT_KRAKEN}/${EXT_KRAKEN_MERGED}/${ID}_${TAXA}_${END_merged_1} -f ${CURRENT}/${OUTPUT}/${TMP}/${ID}_merged${OUT_BWA} -t ${CPU} -l ${SEED_LENGTH} -o ${MAX_GAP} -n ${MAX_DIFF} > ${CURRENT}/${OUTPUT}/${TMP}/${ID}_merged${OUT_SAI}
                srun bwa samse ${CURRENT}/${REF_DIR}/${REF} ${CURRENT}/${OUTPUT}/${TMP}/${ID}_merged${OUT_BWA} ${CURRENT}/${OUTPUT}/${OUT_KRAKEN}/${EXT_KRAKEN_MERGED}/${ID}_${TAXA}_${END_merged_1} -f ${CURRENT}/${OUTPUT}/${TMP}/${ID}_merged${OUT_SAM}

                echo "forward reads"
                echo ""
                srun bwa aln ${CURRENT}/${REF_DIR}/${REF} ${CURRENT}/${OUTPUT}/${OUT_KRAKEN}/${EXT_KRAKEN_PAIRED}/${ID}_${TAXA}_${END_R1_1} -f ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R1${OUT_BWA} -t ${CPU} -l ${SEED_LENGTH} -o ${MAX_GAP} -n ${MAX_DIFF} > ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R1${OUT_SAI}
                srun bwa samse ${CURRENT}/${REF_DIR}/${REF} ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R1${OUT_BWA} ${CURRENT}/${OUTPUT}/${OUT_KRAKEN}/${EXT_KRAKEN_PAIRED}/${ID}_${TAXA}_${END_R1_1} -f ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R1${OUT_SAM}

                echo "reverse reads"
                echo ""
                srun bwa aln ${CURRENT}/${REF_DIR}/${REF} ${CURRENT}/${OUTPUT}/${OUT_KRAKEN}/${EXT_KRAKEN_PAIRED}/${ID}_${TAXA}_${END_R2_2} -f ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R2${OUT_BWA} -t ${CPU} -l ${SEED_LENGTH} -o ${MAX_GAP} -n ${MAX_DIFF} > ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R2${OUT_SAI}
                srun bwa samse ${CURRENT}/${REF_DIR}/${REF} ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R2${OUT_BWA} ${CURRENT}/${OUTPUT}/${OUT_KRAKEN}/${EXT_KRAKEN_PAIRED}/${ID}_${TAXA}_${END_R2_2} -f ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R2${OUT_SAM}

                echo "samtool is starting...."
                echo ""
                srun samtools view -Sb ${CURRENT}/${OUTPUT}/${TMP}/${ID}_merged${OUT_SAM} > ${CURRENT}/${OUTPUT}/${TMP}/${ID}_merged${OUT_BAM}
                srun samtools view -Sb ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R1${OUT_SAM} > ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R1${OUT_BAM}
                srun samtools view -Sb ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R2${OUT_SAM} > ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R2${OUT_BAM}
				
				# bamtools filter commands
				srun bamtools filter -mapQuality '>=25' -length '>=35' -in ${CURRENT}/${OUTPUT}/${TMP}/${ID}_merged${OUT_BAM} -out ${CURRENT}/${OUTPUT}/${TMP}/${ID}_merged_filtered${OUT_BAM}
				srun bamtools filter -mapQuality '>=25' -length '>=35' -in ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R1${OUT_BAM} -out ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R1_filtered${OUT_BAM}
				srun bamtools filter -mapQuality '>=25' -length '>=35' -in ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R2${OUT_BAM} -out ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R2_filtered${OUT_BAM}

                srun samtools sort ${CURRENT}/${OUTPUT}/${TMP}/${ID}_merged_filtered${OUT_BAM} > ${CURRENT}/${OUTPUT}/${TMP}/${ID}_merged_filtered${OUT_SORTED}
                srun samtools sort ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R1_filtered${OUT_BAM} > ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R1_filtered${OUT_SORTED}
                srun samtools sort ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R2_filtered${OUT_BAM} > ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R2_filtered${OUT_SORTED}

                srun samtools index ${CURRENT}/${OUTPUT}/${TMP}/${ID}_merged_filtered${OUT_SORTED}
                srun samtools index ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R1_filtered${OUT_SORTED}
                srun samtools index ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R2_filtered${OUT_SORTED}

                echo "Mark Duplicates...."
                echo ""
                srun picard MarkDuplicates I=${CURRENT}/${OUTPUT}/${TMP}/${ID}_merged_filtered${OUT_SORTED} O=${CURRENT}/${OUTPUT}/${TMP}/${ID}_merged_filtered${OUT_MARKED} M=${CURRENT}/${OUTPUT}/${TMP}/${ID}_merged_filtered${OUT_M_METRICS} REMOVE_DUPLICATES=TRUE VALIDATION_STRINGENCY=LENIENT
                srun picard MarkDuplicates I=${CURRENT}/${OUTPUT}/${TMP}/${ID}_R1_filtered${OUT_SORTED} O=${CURRENT}/${OUTPUT}/${TMP}/${ID}_R1_filtered${OUT_MARKED} M=${CURRENT}/${OUTPUT}/${TMP}/${ID}_R1_filtered${OUT_M_METRICS} REMOVE_DUPLICATES=TRUE VALIDATION_STRINGENCY=LENIENT
                srun picard MarkDuplicates I=${CURRENT}/${OUTPUT}/${TMP}/${ID}_R2_filtered${OUT_SORTED} O=${CURRENT}/${OUTPUT}/${TMP}/${ID}_R2_filtered${OUT_MARKED} M=${CURRENT}/${OUTPUT}/${TMP}/${ID}_R2_filtered${OUT_M_METRICS} REMOVE_DUPLICATES=TRUE VALIDATION_STRINGENCY=LENIENT
                echo "Merge bams into one.."
                echo ""
                srun bamtools merge -in ${CURRENT}/${OUTPUT}/${TMP}/${ID}_merged_filtered${OUT_MARKED} -in ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R1_filtered${OUT_MARKED} -in ${CURRENT}/${OUTPUT}/${TMP}/${ID}_R2_filtered${OUT_MARKED} -out ${CURRENT}/${OUTPUT}/${TMP}/${ID}_combined${OUT_MARKED}

                srun samtools sort ${CURRENT}/${OUTPUT}/${TMP}/${ID}_combined${OUT_MARKED} > ${CURRENT}/${OUTPUT}/${TMP}/${ID}_combined${OUT_COMBINED}

                lib_id=$(echo "${input[j]}" | awk '{print $2}')
                fixed_sample_name=$(echo "${input[j]}" | awk '{print $5}')
                samp2=${fixed_sample_name%%.*}

                echo "Adding read groups for variant calling..."
                echo ""
                srun picard AddOrReplaceReadGroups INPUT=${CURRENT}/${OUTPUT}/${TMP}/${ID}_combined${OUT_COMBINED} OUTPUT=${CURRENT}/${OUTPUT}/${FINAL_BAM}/${ID}_combined_final${OUT_COMBINED} RGID=${samp2} RGLB=${lib_id} RGPL=Illumina RGSM=${samp2} RGPU=1
				srun samtools view -SbF 4 ${CURRENT}/${OUTPUT}/${FINAL_BAM}/${ID}_combined_final${OUT_COMBINED} > ${CURRENT}/${OUTPUT}/${FINAL_BAM}/${ID}_combined_final_extracted${OUT_COMBINED}
				srun samtools flagstat ${CURRENT}/${OUTPUT}/${FINAL_BAM}/${ID}_combined_final${OUT_COMBINED} > ${CURRENT}/${OUTPUT}/${FLAGSTAT}/${ID}_combined_all${OUT_FLAGSTAT}
				srun samtools flagstat ${CURRENT}/${OUTPUT}/${FINAL_BAM}/${ID}_combined_final_extracted${OUT_COMBINED} > ${CURRENT}/${OUTPUT}/${FLAGSTAT}/${ID}_combined_extracted${OUT_FLAGSTAT}	
                echo "First loop just finished"
                echo ""
        done
fi


#module unload bio/${PICARD}
module unload ${BAMTOOLS}
module unload ${BWA}
module unload ${SAMTOOLS}
module unload ${PICARD}

rm -r ${CURRENT}/${OUTPUT}/${TMP}
